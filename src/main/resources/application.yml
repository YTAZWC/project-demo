server:
  port: 7979
logging:
  level:
    top.ytazwc: debug
spring:
  shardingsphere:
    datasource:
      # 数据源名称 多数据源以,分隔
      names: db0, db1
      db0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:43306/project_demo1?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
        username: root
        password: root
      db1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:43306/project_demo2?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
        username: root
        password: root
    # 分片规则配置
    rules:
      # 配置读写分离的虚拟库 主库一个 从库多个
      readwrite-splitting:
        data-sources:
          user_db:
            static-strategy:
              write-data-source-name: db0
              read-data-source-names:
                - db1
            # 配置负载均衡
            load-balancer-name: user_lb
        # 负载均衡策略
        load-balancers:
          user_lb:
            # 按操作轮询
            type: ROUND_ROBIN
      # 数据加密配置
      encrypt:
        tables:
          user:
            columns:
              password:
                # 存储明文的字段
                plain-column: password
                # 存储密文的字段
                cipher-column: password_cipher
                encryptor-name: user_password_encrypt
        encryptors:
          user_password_encrypt:
            type: SM3
            props:
              sm3-salt: 12345678
      sharding:
        # 分布式主键序列算法配置
        key-generators:
          dict_keygen:
            type: SNOWFLAKE
          user_keygen:
            type: NANOID
          alg_snowflake:
            type: SNOWFLAKE
            props:
              worker-id: 1
        # 分片算法配置
        sharding-algorithms:
          user_tbl_alg:
            type: INLINE
            props:
              algorithm-expression: user_$->{Math.abs(user_id.hashCode()%4).intdiv(2) + 1}
          user_db_alg:
            type: HASH_MOD
            props:
              sharding-count: 2
          # 强制分片-HINT: 用于SQL无关的方式分表, 使用Value关键字
          course_hint_tbl_alg:
            type: HINT_INLINE
            props:
              algorithm-expression: course_$->{value}
          # 自定义行片
          course_class_standard-tbl-alg:
            type: CLASS_BASED
            props:
              strategy: STANDARD
              algorithmClassName: top.ytazwc.sharding.MyStandardAlgorithm
          # 自定义分片
          course_class_tbl_alg:
            type: CLASS_BASED
            props:
              strategy: COMPLEX
              algorithmClassName: top.ytazwc.sharding.MyComplexAlgorithm
          # 复杂分片算法
          course_complex_tbl_alg:
            type: COMPLEX_INLINE
            props:
              algorithm-expression: course_$->{(cid+user_id+1)%2+1}
          course_db_alg:
            type: MOD   # 取模
            props:
              sharding-count: 2   # 对 2 取模
          course_tbl_alg:
            type: INLINE  # 行表达式算法
            props:
              algorithm-expression: course_$->{cid%2+1}
              # 允许分片算法支持范围查询
              allow-range-query-with-inline-sharding: true
          table-inline:
            # 分片算法类型
            type: INLINE
            props:
              # 分片算法行表达式
              algorithm-expression: t_orders_$->{order_id%2+1}
        tables:
          dict:
            key-generate-strategy:
              column: dict_id
              key-generator-name: dict_keygen
            actual-data-nodes: db$->{0..1}.dict
          user:
            # 配置读写分离
            # 配置读写分离的虚拟库
            actual-data-nodes: user_db.user
            key-generate-strategy:
              column: user_id
              key-generator-name: user_keygen
#            # 分片节点
#            actual-data-nodes: db$->{0..1}.user_$->{1..2}
#            database-strategy:
#              standard:
#                sharding-column: user_id
#                sharding-algorithm-name: user_db_alg
#            table-strategy:
#              standard:
#                sharding-column: user_id
#                sharding-algorithm-name: user_tbl_alg
          # 指定表的主键生成策略
          course:
            key-generate-strategy:
              column: cid
              key-generator-name: alg_snowflake
            # 指定分片节点
            actual-data-nodes: db$->{0..1}.course_$->{1..2}
            # 分库策略
            database-strategy:
              standard:
                sharding-column: cid
                sharding-algorithm-name: course_db_alg
            # 分表策略
            table-strategy:
              # 强制分片
              hint:
                sharding-algorithm-name: course_hint_tbl_alg
              # 复杂分片 cid, user_id 进行分片
#              complex:
#                sharding-columns: cid,user_id
#                sharding-algorithm-name: course_class_tbl_alg
              # 自定义分片算法
#              standard:
#                sharding-column: cid
#                sharding-algorithm-name: course_class_standard-tbl-alg
          # 逻辑表名称
          t_orders:
            # 行表达式建议使用 $->{} 避免与Spring 本身的属性文件占位符冲突
            actual-data-nodes: db0.t_orders_$->{1..2}
            # 分表策略
            table-strategy:
              standard:
                # 分表列名称
                sharding-column: order_id
                # 分片算法名称
                sharding-algorithm-name: table-inline
        # 指定广播表 会忽略分表逻辑,只往多个库的同一个表插入数据
        broadcast-tables: dict
    props:
      # 展示修改以后的SQL语句
      sql-show: true

#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://localhost:3306/project_demo?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
#    username: root
#    password: 123456
mybatis-plus:
  type-aliases-package: top.ytazwc.entity
  mapper-locations: classpath:mappers/*.xml

